#!/usr/bin/env node

var download = require('download-git-repo')
var program = require('commander')
var exists = require('fs').existsSync
var path = require('path')
var rm = require('rimraf').sync
var uid = require('uid')
var ora = require('ora')
var chalk = require('chalk')
var inquirer = require('inquirer')
var request = require('request')

var logger = require('../lib/logger')
var generate = require('../lib/generate')
var checkVersion = require('../lib/check-version')

/**
 *  Usage.
 */

program
  .usage('<template-name> <project-name>')
  .option('-c, --clone', 'use git clone')


/**
 *  Help
 */

program.on('--help', function() {
  console.log(' Examples:')
  console.log()

  console.log(chalk.gray('  # create a new project with an offical template'))
  console.log('  $ vue init webpack my-project')
  console.log()

  console.log(chalk.gray('  # create a new project straight from a github template'))
  console.log('  $ vue init username/repo my-project')
  console.log()
})


/**
 *  Help
 */

function help () {
  program.parse(process.argv)

  if (program.args.length < 1) return program.help()
}

help()


/**
 * Padding
 */

console.log()

process.on('exit', function () {
  console.log()
})


/**
 *  Settings
 */

var template = program.args[0]
var hasSlash = template.indexOf('/') > -1
var rawname = program.args[1]
var inPlace = !rawname || rawname === '.'
var name = inPlace ? path.relative('../', process.cwd()) : rawname
var to = path.resolve(rawname || '.')
var clone = program.clone || false

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Genearte project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) run()
  })
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // check if tempalte is local
  if (hasSlash && exists(template)) {
    generate(name, template, to, function(err) {
      if (err) logger.fatal(err)
      console.log()

      logger.success('Genearte "%s".', name)
    })
  } else {
    checkVersion(function() {
      if (!hasSlash) {
        // use offical tempaltes
        template = 'vuejs-templates/' + template

        checkDistBranch(template, downloadAndGenerate)
      } else {
        downloadAndGenerate(template)
      }
    })
  }
}


/**
 * Check if the template has a dist branch, if yes, use that
 *
 * @param  {String}   template
 * @param  {Function} cb
 */

function checkDistBranch (template, cb) {
  var spinner = ora('get template branch info.')

  spinner.start()

  request({
    url: 'https://api.github.com/repos/' + template + '/branches',
    headers: {
      'User-Agent': 'vue-cli-copy'
    }
  }, function (err,res, body) {
    spinner.stop()

    if (err) logger.fatal(err)

    if (res.statusCode !== 200) {
      logger.fatal('Template does not exist: ' + template)
    } else {
      var hasDist = JSON.parse(body).some(function (branch) {
        return branch.name === 'dist'
      })

      if (!hasDist) {
        console.log(chalk.yellow('this template has no dist branch, use master branch'))
      }

      return cb(hasDist ? template + '#dist' : template)
    }
  })
}


/**
 * Download a generate from a template repo.
 *
 * @return {String}
 */

function downloadAndGenerate (template) {
  var tmp = '/tmp/vue-template-' + uid()
  var spinner = ora('downloading template')

  spinner.start()

  download(template, tmp, { clone, clone }, function (err) {
    spinner.stop()

    if (err) logger.fatal(err)

    generate(name, tmp, to, function (err) {
      rm(tmp)

      if (err) logger.fatal(err)

      console.log()
      logger.success('Genearte "%s".', name)
    })
  })
}
